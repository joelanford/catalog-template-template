{
    "schema": "olm.package",
    "name": "cockroachdb",
    "defaultChannel": "stable-v5.0"
}
{
    "schema": "olm.channel",
    "name": "stable-v5",
    "package": "cockroachdb",
    "entries": [
        {
            "name": "cockroachdb.v5.0.3"
        },
        {
            "name": "cockroachdb.v5.0.4",
            "skips": [
                "cockroachdb.v5.0.3"
            ]
        }
    ]
}
{
    "schema": "olm.channel",
    "name": "stable-v5.0",
    "package": "cockroachdb",
    "entries": [
        {
            "name": "cockroachdb.v5.0.3"
        },
        {
            "name": "cockroachdb.v5.0.4",
            "skips": [
                "cockroachdb.v5.0.3"
            ]
        }
    ]
}
{
    "schema": "olm.bundle",
    "name": "cockroachdb.v5.0.3",
    "package": "cockroachdb",
    "image": "example.com/myrepo/cockroachdb-bundle@sha256:11ad8ed81f45bec294adfd2ae127c43a601cf6ab975edbc1fa476d1c0fe83e18",
    "properties": [
        {
            "type": "olm.gvk",
            "value": {
                "group": "charts.operatorhub.io",
                "kind": "Cockroachdb",
                "version": "v1alpha1"
            }
        },
        {
            "type": "olm.package",
            "value": {
                "packageName": "cockroachdb",
                "version": "5.0.3"
            }
        },
        {
            "type": "olm.csv.metadata",
            "value": {
                "annotations": {
                    "alm-examples": "[\n  {\n    \"apiVersion\": \"charts.operatorhub.io/v1alpha1\",\n    \"kind\": \"Cockroachdb\",\n    \"metadata\": {\n      \"name\": \"cockroachdb-sample\"\n    },\n    \"spec\": {\n      \"clusterDomain\": \"cluster.local\",\n      \"conf\": {\n        \"attrs\": [],\n        \"cache\": \"25%\",\n        \"cluster-name\": \"\",\n        \"disable-cluster-name-verification\": false,\n        \"http-port\": 8080,\n        \"join\": [],\n        \"locality\": \"\",\n        \"logtostderr\": \"INFO\",\n        \"max-sql-memory\": \"25%\",\n        \"port\": 26257,\n        \"single-node\": false,\n        \"sql-audit-dir\": \"\"\n      },\n      \"image\": {\n        \"credentials\": {},\n        \"pullPolicy\": \"IfNotPresent\",\n        \"repository\": \"cockroachdb/cockroach\",\n        \"tag\": \"v20.2.3\"\n      },\n      \"ingress\": {\n        \"annotations\": {},\n        \"enabled\": false,\n        \"hosts\": [],\n        \"labels\": {},\n        \"paths\": [\n          \"/\"\n        ],\n        \"tls\": []\n      },\n      \"init\": {\n        \"affinity\": {},\n        \"annotations\": {},\n        \"labels\": {\n          \"app.kubernetes.io/component\": \"init\"\n        },\n        \"nodeSelector\": {},\n        \"resources\": {},\n        \"tolerations\": []\n      },\n      \"labels\": {},\n      \"networkPolicy\": {\n        \"enabled\": false,\n        \"ingress\": {\n          \"grpc\": [],\n          \"http\": []\n        }\n      },\n      \"service\": {\n        \"discovery\": {\n          \"annotations\": {},\n          \"labels\": {\n            \"app.kubernetes.io/component\": \"cockroachdb\"\n          }\n        },\n        \"ports\": {\n          \"grpc\": {\n            \"external\": {\n              \"name\": \"grpc\",\n              \"port\": 26257\n            },\n            \"internal\": {\n              \"name\": \"grpc-internal\",\n              \"port\": 26257\n            }\n          },\n          \"http\": {\n            \"name\": \"http\",\n            \"port\": 8080\n          }\n        },\n        \"public\": {\n          \"annotations\": {},\n          \"labels\": {\n            \"app.kubernetes.io/component\": \"cockroachdb\"\n          },\n          \"type\": \"ClusterIP\"\n        }\n      },\n      \"serviceMonitor\": {\n        \"annotations\": {},\n        \"enabled\": false,\n        \"interval\": \"10s\",\n        \"labels\": {}\n      },\n      \"statefulset\": {\n        \"annotations\": {},\n        \"args\": [],\n        \"budget\": {\n          \"maxUnavailable\": 1\n        },\n        \"env\": [],\n        \"labels\": {\n          \"app.kubernetes.io/component\": \"cockroachdb\"\n        },\n        \"nodeAffinity\": {},\n        \"nodeSelector\": {},\n        \"podAffinity\": {},\n        \"podAntiAffinity\": {\n          \"topologyKey\": \"kubernetes.io/hostname\",\n          \"type\": \"soft\",\n          \"weight\": 100\n        },\n        \"podManagementPolicy\": \"Parallel\",\n        \"priorityClassName\": \"\",\n        \"replicas\": 3,\n        \"resources\": {},\n        \"secretMounts\": [],\n        \"tolerations\": [],\n        \"topologySpreadConstraints\": {\n          \"maxSkew\": 1,\n          \"topologyKey\": \"topology.kubernetes.io/zone\",\n          \"whenUnsatisfiable\": \"ScheduleAnyway\"\n        },\n        \"updateStrategy\": {\n          \"type\": \"RollingUpdate\"\n        }\n      },\n      \"storage\": {\n        \"hostPath\": \"\",\n        \"persistentVolume\": {\n          \"annotations\": {},\n          \"enabled\": true,\n          \"labels\": {},\n          \"size\": \"100Gi\",\n          \"storageClass\": \"\"\n        }\n      },\n      \"tls\": {\n        \"certs\": {\n          \"clientRootSecret\": \"cockroachdb-root\",\n          \"nodeSecret\": \"cockroachdb-node\",\n          \"provided\": false,\n          \"tlsSecret\": false\n        },\n        \"enabled\": false,\n        \"init\": {\n          \"image\": {\n            \"credentials\": {},\n            \"pullPolicy\": \"IfNotPresent\",\n            \"repository\": \"cockroachdb/cockroach-k8s-request-cert\",\n            \"tag\": \"0.4\"\n          }\n        },\n        \"serviceAccount\": {\n          \"create\": true,\n          \"name\": \"\"\n        }\n      }\n    }\n  }\n]",
                    "capabilities": "Basic Install",
                    "categories": "Database",
                    "certified": "false",
                    "containerImage": "quay.io/helmoperators/cockroachdb:v5.0.3",
                    "createdAt": "2021-01-23T10-00-00Z",
                    "description": "CockroachDB Operator based on the CockroachDB helm chart",
                    "operators.operatorframework.io/builder": "operator-sdk-v1.3.0",
                    "operators.operatorframework.io/project_layout": "helm.sdk.operatorframework.io/v1",
                    "repository": "https://github.com/dmesser/cockroachdb-operator",
                    "support": "dmesser"
                },
                "apiServiceDefinitions": {},
                "crdDescriptions": {
                    "owned": [
                        {
                            "description": "Represents a CockroachDB cluster",
                            "displayName": "CockroachDB",
                            "kind": "Cockroachdb",
                            "name": "cockroachdbs.charts.operatorhub.io",
                            "resources": [
                                {
                                    "kind": "Deployment",
                                    "name": "",
                                    "version": "apps/v1"
                                },
                                {
                                    "kind": "Service",
                                    "name": "",
                                    "version": "v1"
                                },
                                {
                                    "kind": "ReplicaSet",
                                    "name": "",
                                    "version": "apps/v1"
                                },
                                {
                                    "kind": "Pod",
                                    "name": "",
                                    "version": "v1"
                                },
                                {
                                    "kind": "Secret",
                                    "name": "",
                                    "version": "v1"
                                },
                                {
                                    "kind": "ConfigMap",
                                    "name": "",
                                    "version": "v1"
                                },
                                {
                                    "kind": "PersistentVolumeClaim",
                                    "name": "",
                                    "version": "v1"
                                },
                                {
                                    "kind": "StatefulSet",
                                    "name": "",
                                    "version": "apps/v1"
                                },
                                {
                                    "kind": "Job",
                                    "name": "",
                                    "version": "batch/v1"
                                }
                            ],
                            "version": "v1alpha1"
                        }
                    ]
                },
                "description": "CockroachDB is a scalable, survivable, strongly-consistent SQL database.\n## About this Operator\nThis Operator is based on a Helm chart for CockroachDB. It supports reconfiguration for some parameters, but notably does not handle scale down of the replica count in a seamless manner. Scale up works great.\n\n## Core capabilities\n* **StatefulSet** - Sets up a dynamically scalable CockroachDB cluster using a Kubernetes StatefulSet\n* **Expand Replicas** - Supports expanding the set of replicas by simply editing your object\n* **Dashboard** - Installs the CockroachDB user interface to administer your cluster. Easily expose it via an Ingress rule.\nReview all of the [confiuguration options](https://github.com/helm/charts/tree/master/stable/cockroachdb#configuration) to best run your database instance. The example configuration is derived from the chart's [`values.yaml`](https://github.com/helm/charts/blob/master/stable/cockroachdb/values.yaml).\n## Using the cluster\nThe resulting cluster endpoint can be consumed from a `Service` that follows the pattern: `<StatefulSet-name>-public`. For example to connect using the command line client, use something like the following to obtain the name of the service:\n```\nkubectl get service -l chart=cockroachdb-3.0.7\nNAME                                           TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)              AGE\nexample-9f8ngwzrxbxrulxqmdqfhn51h-cdb          ClusterIP   None             <none>        26257/TCP,8080/TCP   24m\nexample-9f8ngwzrxbxrulxqmdqfhn51h-cdb-public   ClusterIP   10.106.249.134   <none>        26257/TCP,8080/TCP   24m\n```\nThen you can use the CockroachDB command line client to connect to the database cluster:\n```\nkubectl run -it --rm cockroach-client --image=cockroachdb/cockroach --restart=Never --command -- ./cockroach sql --insecure --host example-9f8ngwzrxbxrulxqmdqfhn51h-cdb-public\n```\n## Before you start\nThis Operator requires a cluster with PV support in order to run correctly.\n## Supported configuration parameters\n  | Parameter                                                 | Description                                                     | Default                                          |\n  | ---------                                                 | -----------                                                     | -------                                          |\n  | `clusterDomain`                                           | Cluster's default DNS domain                                    | `cluster.local`                                  |\n  | `conf.attrs`                                              | CockroachDB node attributes                                     | `[]`                                             |\n  | `conf.cache`                                              | Size of CockroachDB's in-memory cache                           | `25%`                                            |\n  | `conf.cluster-name`                                       | Name of CockroachDB cluster                                     | `\"\"`                                             |\n  | `conf.disable-cluster-name-verification`                  | Disable CockroachDB cluster name verification                   | `no`                                             |\n  | `conf.join`                                               | List of already-existing CockroachDB instances                  | `[]`                                             |\n  | `conf.max-disk-temp-storage`                              | Max storage capacity for temp data                              | `0`                                              |\n  | `conf.max-offset`                                         | Max allowed clock offset for CockroachDB cluster                | `500ms`                                          |\n  | `conf.max-sql-memory`                                     | Max memory to use processing SQL querie                         | `25%`                                            |\n  | `conf.locality`                                           | Locality attribute for this deployment                          | `\"\"`                                             |\n  | `conf.single-node`                                        | Disable CockroachDB clustering (standalone mode)                | `no`                                             |\n  | `conf.sql-audit-dir`                                      | Directory for SQL audit log                                     | `\"\"`                                             |\n  | `conf.port`                                               | CockroachDB primary serving port in Pods                        | `26257`                                          |\n  | `conf.http-port`                                          | CockroachDB HTTP port in Pods                                   | `8080`                                           |\n  | `image.repository`                                        | Container image name                                            | `cockroachdb/cockroach`                          |\n  | `image.tag`                                               | Container image tag                                             | `v20.2.3`                                        |\n  | `image.pullPolicy`                                        | Container pull policy                                           | `IfNotPresent`                                   |\n  | `image.credentials`                                       | `registry`, `user` and `pass` credentials to pull private image | `{}`                                             |\n  | `statefulset.replicas`                                    | StatefulSet replicas number                                     | `3`                                              |\n  | `statefulset.updateStrategy`                              | Update strategy for StatefulSet Pods                            | `{\"type\": \"RollingUpdate\"}`                      |\n  | `statefulset.podManagementPolicy`                         | `OrderedReady`/`Parallel` Pods creation/deletion order          | `Parallel`                                       |\n  | `statefulset.budget.maxUnavailable`                       | k8s PodDisruptionBudget parameter                               | `1`                                              |\n  | `statefulset.args`                                        | Extra command-line arguments                                    | `[]`                                             |\n  | `statefulset.env`                                         | Extra env vars                                                  | `[]`                                             |\n  | `statefulset.secretMounts`                                | Additional Secrets to mount at cluster members                  | `[]`                                             |\n  | `statefulset.labels`                                      | Additional labels of StatefulSet and its Pods                   | `{\"app.kubernetes.io/component\": \"cockroachdb\"}` |\n  | `statefulset.annotations`                                 | Additional annotations of StatefulSet Pods                      | `{}`                                             |\n  | `statefulset.nodeAffinity`                                | [Node affinity rules][2] of StatefulSet Pods                    | `{}`                                             |\n  | `statefulset.podAffinity`                                 | [Inter-Pod affinity rules][1] of StatefulSet Pods               | `{}`                                             |\n  | `statefulset.podAntiAffinity`                             | [Anti-affinity rules][1] of StatefulSet Pods                    | auto                                             |\n  | `statefulset.podAntiAffinity.topologyKey`                 | The topologyKey for auto [anti-affinity rules][1]               | `kubernetes.io/hostname`                         |\n  | `statefulset.podAntiAffinity.type`                        | Type of auto [anti-affinity rules][1]                           | `soft`                                           |\n  | `statefulset.podAntiAffinity.weight`                      | Weight for `soft` auto [anti-affinity rules][1]                 | `100`                                            |\n  | `statefulset.nodeSelector`                                | Node labels for StatefulSet Pods assignment                     | `{}`                                             |\n  | `statefulset.priorityClassName`                           | [PriorityClassName][4] for StatefulSet Pods                     | `\"\"`                                             |\n  | `statefulset.tolerations`                                 | Node taints to tolerate by StatefulSet Pods                     | `[]`                                             |\n  | `statefulset.topologySpreadConstraints`                   | [Topology Spread Constraints rules][5] of StatefulSet Pods      | auto                                             |\n  | `statefulset.topologySpreadConstraints.maxSkew`           | Degree to which Pods may be unevenly distributed                | `1`                                              |\n  | `statefulset.topologySpreadConstraints.topologyKey`       | The key of node labels                                          | `topology.kubernetes.io/zone`                    |\n  | `statefulset.topologySpreadConstraints.whenUnsatisfiable` | `ScheduleAnyway`/`DoNotSchedule` for unsatisfiable constraints  | `ScheduleAnyway`                                 |\n  | `statefulset.resources`                                   | Resource requests and limits for StatefulSet Pods               | `{}`                                             |\n  | `service.ports.grpc.external.port`                        | CockroachDB primary serving port in Services                    | `26257`                                          |\n  | `service.ports.grpc.external.name`                        | CockroachDB primary serving port name in Services               | `grpc`                                           |\n  | `service.ports.grpc.internal.port`                        | CockroachDB inter-communication port in Services                | `26257`                                          |\n  | `service.ports.grpc.internal.name`                        | CockroachDB inter-communication port name in Services           | `grpc-internal`                                  |\n  | `service.ports.http.port`                                 | CockroachDB HTTP port in Services                               | `8080`                                           |\n  | `service.ports.http.name`                                 | CockroachDB HTTP port name in Services                          | `http`                                           |\n  | `service.public.type`                                     | Public Service type                                             | `ClusterIP`                                      |\n  | `service.public.labels`                                   | Additional labels of public Service                             | `{\"app.kubernetes.io/component\": \"cockroachdb\"}` |\n  | `service.public.annotations`                              | Additional annotations of public Service                        | `{}`                                             |\n  | `service.discovery.labels`                                | Additional labels of discovery Service                          | `{\"app.kubernetes.io/component\": \"cockroachdb\"}` |\n  | `service.discovery.annotations`                           | Additional annotations of discovery Service                     | `{}`                                             |\n  | `ingress.enabled`                                         | Enable ingress resource for CockroachDB                         | `false`                                          |\n  | `ingress.labels`                                          | Additional labels of Ingress                                    | `{}`                                             |\n  | `ingress.annotations`                                     | Additional annotations of Ingress                               | `{}`                                             |\n  | `ingress.paths`                                           | Paths for the default host                                      | `[/]`                                            |\n  | `ingress.hosts`                                           | CockroachDB Ingress hostnames                                   | `[]`                                             |\n  | `ingress.tls[0].hosts`                                    | CockroachDB Ingress tls hostnames                               | `nil`                                            |\n  | `ingress.tls[0].secretName`                               | CockroachDB Ingress tls secret name                             | `nil`                                            |\n  | `serviceMonitor.enabled`                                  | Create [ServiceMonitor](https://github.com/prometheus-operator/prometheus-operator/blob/master/Documentation/design.md#servicemonitor) Resource for scraping metrics using [PrometheusOperator](https://github.com/prometheus-operator/prometheus-operator/blob/master/Documentation/user-guides/getting-started.md#prometheus-operator)                     | `false`                                             |\n  | `serviceMonitor.labels`                                   | Additional labels of ServiceMonitor                             | `{}`                                             |\n  | `serviceMonitor.annotations`                              | Additional annotations of ServiceMonitor                        | `{}`                                             |\n  | `serviceMonitor.interval`                                 | ServiceMonitor scrape metrics interval                          | `10s`                                            |\n  | `serviceMonitor.scrapeTimeout`                            | ServiceMonitor scrape timeout                                   | `nil`                                            |\n  | `storage.hostPath`                                        | Absolute path on host to store data                             | `\"\"`                                             |\n  | `storage.persistentVolume.enabled`                        | Whether to use PersistentVolume to store data                   | `yes`                                            |\n  | `storage.persistentVolume.size`                           | PersistentVolume size                                           | `100Gi`                                          |\n  | `storage.persistentVolume.storageClass`                   | PersistentVolume class                                          | `\"\"`                                             |\n  | `storage.persistentVolume.labels`                         | Additional labels of PersistentVolumeClaim                      | `{}`                                             |\n  | `storage.persistentVolume.annotations`                    | Additional annotations of PersistentVolumeClaim                 | `{}`                                             |\n  | `init.labels`                                             | Additional labels of init Job and its Pod                       | `{\"app.kubernetes.io/component\": \"init\"}`        |\n  | `init.annotations`                                        | Additional labels of the Pod of init Job                        | `{}`                                             |\n  | `init.affinity`                                           | [Affinity rules][2] of init Job Pod                             | `{}`                                             |\n  | `init.nodeSelector`                                       | Node labels for init Job Pod assignment                         | `{}`                                             |\n  | `init.tolerations`                                        | Node taints to tolerate by init Job Pod                         | `[]`                                             |\n  | `init.resources`                                          | Resource requests and limits for the Pod of init Job            | `{}`                                             |\n  | `tls.enabled`                                             | Whether to run securely using TLS certificates                  | `no`                                             |\n  | `tls.serviceAccount.create`                               | Whether to create a new RBAC service account                    | `yes`                                            |\n  | `tls.serviceAccount.name`                                 | Name of RBAC service account to use                             | `\"\"`                                             |\n  | `tls.certs.provided`                                      | Bring your own certs scenario, i.e certificates are provided    | `no`                                             |\n  | `tls.certs.clientRootSecret`                              | If certs are provided, secret name for client root cert         | `cockroachdb-root`                               |\n  | `tls.certs.nodeSecret`                                    | If certs are provided, secret name for node cert                | `cockroachdb-node`                               |\n  | `tls.certs.tlsSecret`                                     | Own certs are stored in TLS secret                              | `no`                                             |\n  | `tls.init.image.repository`                               | Image to use for requesting TLS certificates                    | `cockroachdb/cockroach-k8s-request-cert`         |\n  | `tls.init.image.tag`                                      | Image tag to use for requesting TLS certificates                | `0.4`                                            |\n  | `tls.init.image.pullPolicy`                               | Requesting TLS certificates container pull policy               | `IfNotPresent`                                   |\n  | `tls.init.image.credentials`                              | `registry`, `user` and `pass` credentials to pull private image | `{}`                                             |\n  | `networkPolicy.enabled`                                   | Enable NetworkPolicy for CockroachDB's Pods                     | `no`                                             |\n  | `networkPolicy.ingress.grpc`                              | Whitelist resources to access gRPC port of CockroachDB's Pods   | `[]`                                             |\n  | `networkPolicy.ingress.http`                              | Whitelist resources to access gRPC port of CockroachDB's Pods   | `[]`                                             |\n## Upgrading the cluster\nAssuming the name of the `CockroachDB` instance is `example`, follow the steps below to update to a newer version (example used os v19.2.5->v19.2.7) of CockroachDB:\nLaunch a temporary interactive pod and start the built-in SQL client:\n```shell\nkubectl run cockroachdb --rm -it \\\n--image=cockroachdb/cockroach \\\n--restart=Never \\\n-- sql --insecure --host=example-cockroachdb-public\n```\n> If you are running in secure mode, you will have to provide a client certificate to the cluster in order to authenticate, so the above command will not work. See [here](https://github.com/cockroachdb/cockroach/blob/master/cloud/kubernetes/client-secure.yaml) for an example of how to set up an interactive SQL shell against a secure cluster or [here](https://github.com/cockroachdb/cockroach/blob/master/cloud/kubernetes/example-app-secure.yaml) for an example application connecting to a secure cluster.\nSet `cluster.preserve_downgrade_option`, where `$current_version` is the CockroachDB version currently running (e.g., `19.2`):\n```sql\n> SET CLUSTER SETTING cluster.preserve_downgrade_option = '$current_version';\n```\nExit the shell and delete the temporary pod:\n```sql\n> \\q\n```\nKick off the upgrade process by changing the new Docker image, where `$new_version` is the CockroachDB version to which you are upgrading:\n```shell\nkubectl delete job example-cockroachdb-init\n```\n```shell\nkubectl patch cockroachdbs example -p '{\"spec\": {\"image\":{\"tag\":\"v19.2.7\"}}}' --type merge\n```\nKubernetes will carry out a safe [rolling upgrade](https://kubernetes.io/docs/tutorials/stateful-application/basic-stateful-set/#updating-statefulsets) of your CockroachDB nodes one-by-one. Monitor the cluster's pods until all have been successfully restarted:\n```shell\nkubectl get pods\n```\n```\nNAME                                READY     STATUS              RESTARTS   AGE\nexample-cockroachdb-0            1/1       Running             0          2m\nexample-cockroachdb-1            1/1       Running             0          3m\nexample-cockroachdb-2            1/1       Running             0          3m\nexample-cockroachdb-3            0/1       ContainerCreating   0          25s\nexample-cockroachdb-init-nwjkh   0/1       ContainerCreating   0          6s\n```\n```shell\nkubectl get pods \\\n-o jsonpath='{range .items[*]}{.metadata.name}{\"\\t\"}{.spec.containers[0].image}{\"\\n\"}'\n```\n```\nexample-cockroachdb-0    cockroachdb/cockroach:v19.2.7\nexample-cockroachdb-1    cockroachdb/cockroach:v19.2.7\nexample-cockroachdb-2    cockroachdb/cockroach:v19.2.7\n```\nResume normal operations. Once you are comfortable that the stability and performance of the cluster is what you'd expect post-upgrade, finalize the upgrade:\n```shell\nkubectl run cockroachdb --rm -it \\\n--image=cockroachdb/cockroach \\\n--restart=Never \\\n-- sql --insecure --host=example-cockroachdb-public\n```\n```sql\n> RESET CLUSTER SETTING cluster.preserve_downgrade_option;\n> \\q\n```\n",
                "displayName": "CockroachDB",
                "installModes": [
                    {
                        "supported": true,
                        "type": "OwnNamespace"
                    },
                    {
                        "supported": true,
                        "type": "SingleNamespace"
                    },
                    {
                        "supported": false,
                        "type": "MultiNamespace"
                    },
                    {
                        "supported": true,
                        "type": "AllNamespaces"
                    }
                ],
                "keywords": [
                    "cockroach",
                    "cockroachdb"
                ],
                "links": [
                    {
                        "name": "Helm Chart Source",
                        "url": "https://github.com/helm/charts/tree/master/stable/cockroachdb"
                    },
                    {
                        "name": "Configuration Options",
                        "url": "https://github.com/helm/charts/tree/master/stable/cockroachdb#configuration"
                    },
                    {
                        "name": "CockroachDB Source",
                        "url": "https://github.com/cockroachdb/cockroach"
                    }
                ],
                "maintainers": [
                    {
                        "email": "dmesser@redhat.com",
                        "name": "Daniel Messer"
                    }
                ],
                "maturity": "stable",
                "minKubeVersion": "1.8.0",
                "provider": {
                    "name": "Helm Community",
                    "url": "https://artifacthub.io/packages/helm/cockroachdb/cockroachdb"
                }
            }
        }
    ],
    "relatedImages": [
        {
            "name": "",
            "image": "example.com/myrepo/cockroachdb-bundle@sha256:11ad8ed81f45bec294adfd2ae127c43a601cf6ab975edbc1fa476d1c0fe83e18"
        },
        {
            "name": "",
            "image": "gcr.io/kubebuilder/kube-rbac-proxy:v0.5.0"
        },
        {
            "name": "",
            "image": "quay.io/helmoperators/cockroachdb:v5.0.3"
        }
    ]
}
{
    "schema": "olm.bundle",
    "name": "cockroachdb.v5.0.4",
    "package": "cockroachdb",
    "image": "example.com/myrepo/cockroachdb-bundle@sha256:f2722c8d760c9a5a5c4d5737fd8a4d47ba9845fedbbaec181fae98028ad53c0c",
    "properties": [
        {
            "type": "olm.gvk",
            "value": {
                "group": "charts.operatorhub.io",
                "kind": "Cockroachdb",
                "version": "v1alpha1"
            }
        },
        {
            "type": "olm.package",
            "value": {
                "packageName": "cockroachdb",
                "version": "5.0.4"
            }
        },
        {
            "type": "olm.csv.metadata",
            "value": {
                "annotations": {
                    "alm-examples": "[\n  {\n    \"apiVersion\": \"charts.operatorhub.io/v1alpha1\",\n    \"kind\": \"Cockroachdb\",\n    \"metadata\": {\n      \"name\": \"cockroachdb-sample\"\n    },\n    \"spec\": {\n      \"clusterDomain\": \"cluster.local\",\n      \"conf\": {\n        \"attrs\": [],\n        \"cache\": \"25%\",\n        \"cluster-name\": \"\",\n        \"disable-cluster-name-verification\": false,\n        \"http-port\": 8080,\n        \"join\": [],\n        \"locality\": \"\",\n        \"logtostderr\": \"INFO\",\n        \"max-sql-memory\": \"25%\",\n        \"port\": 26257,\n        \"single-node\": false,\n        \"sql-audit-dir\": \"\"\n      },\n      \"image\": {\n        \"credentials\": {},\n        \"pullPolicy\": \"IfNotPresent\",\n        \"repository\": \"cockroachdb/cockroach\",\n        \"tag\": \"v20.2.4\"\n      },\n      \"ingress\": {\n        \"annotations\": {},\n        \"enabled\": false,\n        \"hosts\": [],\n        \"labels\": {},\n        \"paths\": [\n          \"/\"\n        ],\n        \"tls\": []\n      },\n      \"init\": {\n        \"affinity\": {},\n        \"annotations\": {},\n        \"labels\": {\n          \"app.kubernetes.io/component\": \"init\"\n        },\n        \"nodeSelector\": {},\n        \"resources\": {},\n        \"tolerations\": []\n      },\n      \"labels\": {},\n      \"networkPolicy\": {\n        \"enabled\": false,\n        \"ingress\": {\n          \"grpc\": [],\n          \"http\": []\n        }\n      },\n      \"service\": {\n        \"discovery\": {\n          \"annotations\": {},\n          \"labels\": {\n            \"app.kubernetes.io/component\": \"cockroachdb\"\n          }\n        },\n        \"ports\": {\n          \"grpc\": {\n            \"external\": {\n              \"name\": \"grpc\",\n              \"port\": 26257\n            },\n            \"internal\": {\n              \"name\": \"grpc-internal\",\n              \"port\": 26257\n            }\n          },\n          \"http\": {\n            \"name\": \"http\",\n            \"port\": 8080\n          }\n        },\n        \"public\": {\n          \"annotations\": {},\n          \"labels\": {\n            \"app.kubernetes.io/component\": \"cockroachdb\"\n          },\n          \"type\": \"ClusterIP\"\n        }\n      },\n      \"serviceMonitor\": {\n        \"annotations\": {},\n        \"enabled\": false,\n        \"interval\": \"10s\",\n        \"labels\": {}\n      },\n      \"statefulset\": {\n        \"annotations\": {},\n        \"args\": [],\n        \"budget\": {\n          \"maxUnavailable\": 1\n        },\n        \"env\": [],\n        \"labels\": {\n          \"app.kubernetes.io/component\": \"cockroachdb\"\n        },\n        \"nodeAffinity\": {},\n        \"nodeSelector\": {},\n        \"podAffinity\": {},\n        \"podAntiAffinity\": {\n          \"topologyKey\": \"kubernetes.io/hostname\",\n          \"type\": \"soft\",\n          \"weight\": 100\n        },\n        \"podManagementPolicy\": \"Parallel\",\n        \"priorityClassName\": \"\",\n        \"replicas\": 3,\n        \"resources\": {},\n        \"secretMounts\": [],\n        \"tolerations\": [],\n        \"topologySpreadConstraints\": {\n          \"maxSkew\": 1,\n          \"topologyKey\": \"topology.kubernetes.io/zone\",\n          \"whenUnsatisfiable\": \"ScheduleAnyway\"\n        },\n        \"updateStrategy\": {\n          \"type\": \"RollingUpdate\"\n        }\n      },\n      \"storage\": {\n        \"hostPath\": \"\",\n        \"persistentVolume\": {\n          \"annotations\": {},\n          \"enabled\": true,\n          \"labels\": {},\n          \"size\": \"100Gi\",\n          \"storageClass\": \"\"\n        }\n      },\n      \"tls\": {\n        \"certs\": {\n          \"clientRootSecret\": \"cockroachdb-root\",\n          \"nodeSecret\": \"cockroachdb-node\",\n          \"provided\": false,\n          \"tlsSecret\": false\n        },\n        \"enabled\": false,\n        \"init\": {\n          \"image\": {\n            \"credentials\": {},\n            \"pullPolicy\": \"IfNotPresent\",\n            \"repository\": \"cockroachdb/cockroach-k8s-request-cert\",\n            \"tag\": \"0.4\"\n          }\n        },\n        \"serviceAccount\": {\n          \"create\": true,\n          \"name\": \"\"\n        }\n      }\n    }\n  }\n]",
                    "capabilities": "Basic Install",
                    "categories": "Database",
                    "certified": "false",
                    "containerImage": "quay.io/helmoperators/cockroachdb:v5.0.4",
                    "createdAt": "2021-01-23T10-00-00Z",
                    "description": "CockroachDB Operator based on the CockroachDB helm chart",
                    "operators.operatorframework.io/builder": "operator-sdk-v1.3.0",
                    "operators.operatorframework.io/project_layout": "helm.sdk.operatorframework.io/v1",
                    "repository": "https://github.com/dmesser/cockroachdb-operator",
                    "support": "dmesser"
                },
                "apiServiceDefinitions": {},
                "crdDescriptions": {
                    "owned": [
                        {
                            "description": "Represents a CockroachDB cluster",
                            "displayName": "CockroachDB",
                            "kind": "Cockroachdb",
                            "name": "cockroachdbs.charts.operatorhub.io",
                            "resources": [
                                {
                                    "kind": "Deployment",
                                    "name": "",
                                    "version": "apps/v1"
                                },
                                {
                                    "kind": "Service",
                                    "name": "",
                                    "version": "v1"
                                },
                                {
                                    "kind": "ReplicaSet",
                                    "name": "",
                                    "version": "apps/v1"
                                },
                                {
                                    "kind": "Pod",
                                    "name": "",
                                    "version": "v1"
                                },
                                {
                                    "kind": "Secret",
                                    "name": "",
                                    "version": "v1"
                                },
                                {
                                    "kind": "ConfigMap",
                                    "name": "",
                                    "version": "v1"
                                },
                                {
                                    "kind": "PersistentVolumeClaim",
                                    "name": "",
                                    "version": "v1"
                                },
                                {
                                    "kind": "StatefulSet",
                                    "name": "",
                                    "version": "apps/v1"
                                },
                                {
                                    "kind": "Job",
                                    "name": "",
                                    "version": "batch/v1"
                                }
                            ],
                            "version": "v1alpha1"
                        }
                    ]
                },
                "description": "CockroachDB is a scalable, survivable, strongly-consistent SQL database.\n## About this Operator\nThis Operator is based on a Helm chart for CockroachDB. It supports the same parameters like the official [CockroachDB Helm Chart](https://github.com/cockroachdb/helm-charts/tree/master/cockroachdb).\n\n## Core capabilities\n* **StatefulSet** - Sets up a dynamically scalable CockroachDB cluster using a Kubernetes StatefulSet\n* **Expand Replicas** - Supports expanding the set of replicas by simply editing your object\n* **Dashboard** - Installs the CockroachDB user interface to administer your cluster. Easily expose it via an Ingress rule.\nReview all of the [confiuguration options](https://github.com/helm/charts/tree/master/stable/cockroachdb#configuration) to best run your database instance. The example configuration is derived from the chart's [`values.yaml`](https://github.com/helm/charts/blob/master/stable/cockroachdb/values.yaml).\n## Using the cluster\nThe resulting cluster endpoint can be consumed from a `Service` that follows the pattern: `<StatefulSet-name>-public`. For example to connect using the command line client, use something like the following to obtain the name of the service:\n```\nkubectl get service -l chart=cockroachdb-5.0.4\nNAME                                           TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)              AGE\nexample-9f8ngwzrxbxrulxqmdqfhn51h-cdb          ClusterIP   None             <none>        26257/TCP,8080/TCP   24m\nexample-9f8ngwzrxbxrulxqmdqfhn51h-cdb-public   ClusterIP   10.106.249.134   <none>        26257/TCP,8080/TCP   24m\n```\nThen you can use the CockroachDB command line client to connect to the database cluster:\n```\nkubectl run -it --rm cockroach-client --image=cockroachdb/cockroach --restart=Never --command -- ./cockroach sql --insecure --host example-9f8ngwzrxbxrulxqmdqfhn51h-cdb-public\n```\n## Before you start\nThis Operator requires a cluster with PV support in order to run correctly.\n\nNote that for a production cluster, you will likely want to override the following parameters in [`values.yaml`](values.yaml) with your own values.\n\n- `statefulset.resources.requests.memory` and `statefulset.resources.limits.memory` allocate memory resources to CockroachDB pods in your cluster.\n- `conf.cache` and `conf.max-sql-memory` are memory limits that we recommend setting to 1/4 of the above resource allocation. When running CockroachDB, you must set these limits explicitly to avoid running out of memory.\n- `storage.persistentVolume.size` defaults to `100Gi` of disk space per pod, which you may increase or decrease for your use case.\n- `storage.persistentVolume.storageClass` uses the default storage class for your environment. We strongly recommend that you specify a storage class which uses an SSD.\n- `tls.enabled` must be set to `yes`/`true` to deploy in secure mode.\n\nFor more information on overriding the `values.yaml` parameters, please see:\n> <https://www.cockroachlabs.com/docs/stable/orchestrate-cockroachdb-with-kubernetes.html#step-2-start-cockroachdb>\n\nIf you are running in secure mode (with configuration parameter `tls.enabled` set to `yes`/`true`) and `tls.certs.provided` set to `no`/`false`), then you will have to manually approve the cluster's security certificates as the pods are created. You can see the pending CSRs (certificate signing requests) by running `kubectl get csr`, and approve them by running `kubectl certificate approve <csr-name>`. You'll have to approve one certificate for each CockroachDB node (e.g., `default.node.my-release-cockroachdb-0` and one client certificate for the job that initializes the cluster (e.g., `default.node.root`).\n\nWhen `tls.certs.provided` is set to `yes`/`true`, this chart will use certificates created outside of Kubernetes. You may want to use this if you want to use a different certificate authority from the one being used by Kubernetes or if your Kubernetes cluster doesn't fully support certificate-signing requests. To use this, first set up your certificates and load them into your Kubernetes cluster as Secrets using the commands below:\n\n```\nmkdir certs\nmkdir my-safe-directory\ncockroach cert create-ca --certs-dir=certs --ca-key=my-safe-directory/ca.key\ncockroach cert create-client root --certs-dir=certs --ca-key=my-safe-directory/ca.key\nkubectl create secret generic cockroachdb-root --from-file=certs\ncockroach cert create-node --certs-dir=certs --ca-key=my-safe-directory/ca.key localhost 127.0.0.1 eerie-horse-cockroachdb-public eerie-horse-cockroachdb-public.default eerie-horse-cockroachdb-public.default.svc.cluster.local *.eerie-horse-cockroachdb *.eerie-horse-cockroachdb.default *.eerie-horse-cockroachdb.default.svc.cluster.local\nkubectl create secret generic cockroachdb-node --from-file=certs\n```\n\nSet `tls.certs.tlsSecret` to `yes/true` if you make use of [cert-manager][3] in your cluster.\n\n[cert-manager][3] stores generated certificates in dedicated TLS secrets. Thus, they are always named:\n\n* `ca.crt`\n* `tls.crt`\n* `tls.key`\n\nOn the other hand, CockroachDB also demands dedicated certificate filenames:\n\n* `ca.crt`\n* `node.crt`\n* `node.key`\n* `client.root.crt`\n* `client.root.key`\n\nBy activating `tls.certs.tlsSecret` we benefit from projected secrets and convert the TLS secret filenames to their according CockroachDB filenames.\n\nIf you are running in secure mode, then you will have to manually approve the cluster's security certificates as the pods are created. You can see the pending CSRs (certificate signing requests) by running `kubectl get csr`, and approve them by running `kubectl certificate approve <csr-name>`. You'll have to approve one certificate for each CockroachDB node (e.g., `default.node.my-release-cockroachdb-0` and one client certificate for the job that initializes the cluster (e.g., `default.node.root`).\n\nConfirm that all pods are `Running` successfully and init has been completed:\n\n```shell\nkubectl get pods\n```\n\n```\nNAME                                READY     STATUS      RESTARTS   AGE\nmy-release-cockroachdb-0            1/1       Running     0          1m\nmy-release-cockroachdb-1            1/1       Running     0          1m\nmy-release-cockroachdb-2            1/1       Running     0          1m\nmy-release-cockroachdb-init-k6jcr   0/1       Completed   0          1m\n```\n\nConfirm that persistent volumes are created and claimed for each pod:\n\n```shell\nkubectl get pv\n```\n\n```\nNAME                                       CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS    CLAIM                                      STORAGECLASS   REASON    AGE\npvc-64878ebf-f3f0-11e8-ab5b-42010a8e0035   100Gi      RWO            Delete           Bound     default/datadir-my-release-cockroachdb-0   standard                 51s\npvc-64945b4f-f3f0-11e8-ab5b-42010a8e0035   100Gi      RWO            Delete           Bound     default/datadir-my-release-cockroachdb-1   standard                 51s\npvc-649d920d-f3f0-11e8-ab5b-42010a8e0035   100Gi      RWO            Delete           Bound     default/datadir-my-release-cockroachdb-2   standard                 51s\n```\n\n## Upgrading the cluster\n\n### Chart version 3.0.0 and after\n\nLaunch a temporary interactive pod and start the built-in SQL client:\n\n```shell\nkubectl run cockroachdb --rm -it \\\n--image=cockroachdb/cockroach \\\n--restart=Never \\\n-- sql --insecure --host=my-release-cockroachdb-public\n```\n\n> If you are running in secure mode, you will have to provide a client certificate to the cluster in order to authenticate, so the above command will not work. See [here](https://github.com/cockroachdb/cockroach/blob/master/cloud/kubernetes/client-secure.yaml) for an example of how to set up an interactive SQL shell against a secure cluster or [here](https://github.com/cockroachdb/cockroach/blob/master/cloud/kubernetes/example-app-secure.yaml) for an example application connecting to a secure cluster.\n\nSet `cluster.preserve_downgrade_option`, where `$current_version` is the CockroachDB version currently running (e.g., `19.2`):\n\n```sql\n> SET CLUSTER SETTING cluster.preserve_downgrade_option = '$current_version';\n```\n\nExit the shell and delete the temporary pod:\n\n```sql\n> \\q\n```\n\nKick off the upgrade process by changing the new Docker image, where `$new_version` is the CockroachDB version to which you are upgrading:\n\n```shell\nkubectl delete job my-release-cockroachdb-init\n```\n\n```shell\nkubectl patch cockroachdbs example -p '{\"spec\": {\"image\":{\"tag\":\"<new version tag here>\"}}}' --type merge\n```\n\nKubernetes will carry out a safe [rolling upgrade](https://kubernetes.io/docs/tutorials/stateful-application/basic-stateful-set/#updating-statefulsets) of your CockroachDB nodes one-by-one. Monitor the cluster's pods until all have been successfully restarted:\n\n```shell\nkubectl get pods\n```\n\n```\nNAME                                READY     STATUS              RESTARTS   AGE\nmy-release-cockroachdb-0            1/1       Running             0          2m\nmy-release-cockroachdb-1            1/1       Running             0          3m\nmy-release-cockroachdb-2            1/1       Running             0          3m\nmy-release-cockroachdb-3            0/1       ContainerCreating   0          25s\nmy-release-cockroachdb-init-nwjkh   0/1       ContainerCreating   0          6s\n```\n\n```shell\nkubectl get pods \\\n-o jsonpath='{range .items[*]}{.metadata.name}{\"\\t\"}{.spec.containers[0].image}{\"\\n\"}'\n```\n\n```\nmy-release-cockroachdb-0    cockroachdb/cockroach:v20.2.4\nmy-release-cockroachdb-1    cockroachdb/cockroach:v20.2.4\nmy-release-cockroachdb-2    cockroachdb/cockroach:v20.2.4\nmy-release-cockroachdb-3    cockroachdb/cockroach:v20.2.4\n```\n\nResume normal operations. Once you are comfortable that the stability and performance of the cluster is what you'd expect post-upgrade, finalize the upgrade:\n\n```shell\nkubectl run cockroachdb --rm -it \\\n--image=cockroachdb/cockroach \\\n--restart=Never \\\n-- sql --insecure --host=my-release-cockroachdb-public\n```\n\n```sql\n> RESET CLUSTER SETTING cluster.preserve_downgrade_option;\n> \\q\n```\n\n## Configuration\n\nThe following table lists the configurable parameters of the CockroachDB chart and their default values.\nFor details see the [`values.yaml`](values.yaml) file.\n\n| Parameter                                                 | Description                                                     | Default                                          |\n| ---------                                                 | -----------                                                     | -------                                          |\n| `clusterDomain`                                           | Cluster's default DNS domain                                    | `cluster.local`                                  |\n| `conf.attrs`                                              | CockroachDB node attributes                                     | `[]`                                             |\n| `conf.cache`                                              | Size of CockroachDB's in-memory cache                           | `25%`                                            |\n| `conf.cluster-name`                                       | Name of CockroachDB cluster                                     | `\"\"`                                             |\n| `conf.disable-cluster-name-verification`                  | Disable CockroachDB cluster name verification                   | `no`                                             |\n| `conf.join`                                               | List of already-existing CockroachDB instances                  | `[]`                                             |\n| `conf.max-disk-temp-storage`                              | Max storage capacity for temp data                              | `0`                                              |\n| `conf.max-offset`                                         | Max allowed clock offset for CockroachDB cluster                | `500ms`                                          |\n| `conf.max-sql-memory`                                     | Max memory to use processing SQL querie                         | `25%`                                            |\n| `conf.locality`                                           | Locality attribute for this deployment                          | `\"\"`                                             |\n| `conf.single-node`                                        | Disable CockroachDB clustering (standalone mode)                | `no`                                             |\n| `conf.sql-audit-dir`                                      | Directory for SQL audit log                                     | `\"\"`                                             |\n| `conf.port`                                               | CockroachDB primary serving port in Pods                        | `26257`                                          |\n| `conf.http-port`                                          | CockroachDB HTTP port in Pods                                   | `8080`                                           |\n| `image.repository`                                        | Container image name                                            | `cockroachdb/cockroach`                          |\n| `image.tag`                                               | Container image tag                                             | `v20.2.4`                                        |\n| `image.pullPolicy`                                        | Container pull policy                                           | `IfNotPresent`                                   |\n| `image.credentials`                                       | `registry`, `user` and `pass` credentials to pull private image | `{}`                                             |\n| `statefulset.replicas`                                    | StatefulSet replicas number                                     | `3`                                              |\n| `statefulset.updateStrategy`                              | Update strategy for StatefulSet Pods                            | `{\"type\": \"RollingUpdate\"}`                      |\n| `statefulset.podManagementPolicy`                         | `OrderedReady`/`Parallel` Pods creation/deletion order          | `Parallel`                                       |\n| `statefulset.budget.maxUnavailable`                       | k8s PodDisruptionBudget parameter                               | `1`                                              |\n| `statefulset.args`                                        | Extra command-line arguments                                    | `[]`                                             |\n| `statefulset.env`                                         | Extra env vars                                                  | `[]`                                             |\n| `statefulset.secretMounts`                                | Additional Secrets to mount at cluster members                  | `[]`                                             |\n| `statefulset.labels`                                      | Additional labels of StatefulSet and its Pods                   | `{\"app.kubernetes.io/component\": \"cockroachdb\"}` |\n| `statefulset.annotations`                                 | Additional annotations of StatefulSet Pods                      | `{}`                                             |\n| `statefulset.nodeAffinity`                                | [Node affinity rules][2] of StatefulSet Pods                    | `{}`                                             |\n| `statefulset.podAffinity`                                 | [Inter-Pod affinity rules][1] of StatefulSet Pods               | `{}`                                             |\n| `statefulset.podAntiAffinity`                             | [Anti-affinity rules][1] of StatefulSet Pods                    | auto                                             |\n| `statefulset.podAntiAffinity.topologyKey`                 | The topologyKey for auto [anti-affinity rules][1]               | `kubernetes.io/hostname`                         |\n| `statefulset.podAntiAffinity.type`                        | Type of auto [anti-affinity rules][1]                           | `soft`                                           |\n| `statefulset.podAntiAffinity.weight`                      | Weight for `soft` auto [anti-affinity rules][1]                 | `100`                                            |\n| `statefulset.nodeSelector`                                | Node labels for StatefulSet Pods assignment                     | `{}`                                             |\n| `statefulset.priorityClassName`                           | [PriorityClassName][4] for StatefulSet Pods                     | `\"\"`                                             |\n| `statefulset.tolerations`                                 | Node taints to tolerate by StatefulSet Pods                     | `[]`                                             |\n| `statefulset.topologySpreadConstraints`                   | [Topology Spread Constraints rules][5] of StatefulSet Pods      | auto                                             |\n| `statefulset.topologySpreadConstraints.maxSkew`           | Degree to which Pods may be unevenly distributed                | `1`                                              |\n| `statefulset.topologySpreadConstraints.topologyKey`       | The key of node labels                                          | `topology.kubernetes.io/zone`                    |\n| `statefulset.topologySpreadConstraints.whenUnsatisfiable` | `ScheduleAnyway`/`DoNotSchedule` for unsatisfiable constraints  | `ScheduleAnyway`                                 |\n| `statefulset.resources`                                   | Resource requests and limits for StatefulSet Pods               | `{}`                                             |\n| `service.ports.grpc.external.port`                        | CockroachDB primary serving port in Services                    | `26257`                                          |\n| `service.ports.grpc.external.name`                        | CockroachDB primary serving port name in Services               | `grpc`                                           |\n| `service.ports.grpc.internal.port`                        | CockroachDB inter-communication port in Services                | `26257`                                          |\n| `service.ports.grpc.internal.name`                        | CockroachDB inter-communication port name in Services           | `grpc-internal`                                  |\n| `service.ports.http.port`                                 | CockroachDB HTTP port in Services                               | `8080`                                           |\n| `service.ports.http.name`                                 | CockroachDB HTTP port name in Services                          | `http`                                           |\n| `service.public.type`                                     | Public Service type                                             | `ClusterIP`                                      |\n| `service.public.labels`                                   | Additional labels of public Service                             | `{\"app.kubernetes.io/component\": \"cockroachdb\"}` |\n| `service.public.annotations`                              | Additional annotations of public Service                        | `{}`                                             |\n| `service.discovery.labels`                                | Additional labels of discovery Service                          | `{\"app.kubernetes.io/component\": \"cockroachdb\"}` |\n| `service.discovery.annotations`                           | Additional annotations of discovery Service                     | `{}`                                             |\n| `ingress.enabled`                                         | Enable ingress resource for CockroachDB                         | `false`                                          |\n| `ingress.labels`                                          | Additional labels of Ingress                                    | `{}`                                             |\n| `ingress.annotations`                                     | Additional annotations of Ingress                               | `{}`                                             |\n| `ingress.paths`                                           | Paths for the default host                                      | `[/]`                                            |\n| `ingress.hosts`                                           | CockroachDB Ingress hostnames                                   | `[]`                                             |\n| `ingress.tls[0].hosts`                                    | CockroachDB Ingress tls hostnames                               | `nil`                                            |\n| `ingress.tls[0].secretName`                               | CockroachDB Ingress tls secret name                             | `nil`                                            |\n| `serviceMonitor.enabled`                                  | Create [ServiceMonitor](https://github.com/prometheus-operator/prometheus-operator/blob/master/Documentation/design.md#servicemonitor) Resource for scraping metrics using [PrometheusOperator](https://github.com/prometheus-operator/prometheus-operator/blob/master/Documentation/user-guides/getting-started.md#prometheus-operator)                     | `false`                                             |\n| `serviceMonitor.labels`                                   | Additional labels of ServiceMonitor                             | `{}`                                             |\n| `serviceMonitor.annotations`                              | Additional annotations of ServiceMonitor                        | `{}`                                             |\n| `serviceMonitor.interval`                                 | ServiceMonitor scrape metrics interval                          | `10s`                                            |\n| `serviceMonitor.scrapeTimeout`                            | ServiceMonitor scrape timeout                                   | `nil`                                            |\n| `storage.hostPath`                                        | Absolute path on host to store data                             | `\"\"`                                             |\n| `storage.persistentVolume.enabled`                        | Whether to use PersistentVolume to store data                   | `yes`                                            |\n| `storage.persistentVolume.size`                           | PersistentVolume size                                           | `100Gi`                                          |\n| `storage.persistentVolume.storageClass`                   | PersistentVolume class                                          | `\"\"`                                             |\n| `storage.persistentVolume.labels`                         | Additional labels of PersistentVolumeClaim                      | `{}`                                             |\n| `storage.persistentVolume.annotations`                    | Additional annotations of PersistentVolumeClaim                 | `{}`                                             |\n| `init.labels`                                             | Additional labels of init Job and its Pod                       | `{\"app.kubernetes.io/component\": \"init\"}`        |\n| `init.annotations`                                        | Additional labels of the Pod of init Job                        | `{}`                                             |\n| `init.affinity`                                           | [Affinity rules][2] of init Job Pod                             | `{}`                                             |\n| `init.nodeSelector`                                       | Node labels for init Job Pod assignment                         | `{}`                                             |\n| `init.tolerations`                                        | Node taints to tolerate by init Job Pod                         | `[]`                                             |\n| `init.resources`                                          | Resource requests and limits for the Pod of init Job            | `{}`                                             |\n| `tls.enabled`                                             | Whether to run securely using TLS certificates                  | `no`                                             |\n| `tls.serviceAccount.create`                               | Whether to create a new RBAC service account                    | `yes`                                            |\n| `tls.serviceAccount.name`                                 | Name of RBAC service account to use                             | `\"\"`                                             |\n| `tls.certs.provided`                                      | Bring your own certs scenario, i.e certificates are provided    | `no`                                             |\n| `tls.certs.clientRootSecret`                              | If certs are provided, secret name for client root cert         | `cockroachdb-root`                               |\n| `tls.certs.nodeSecret`                                    | If certs are provided, secret name for node cert                | `cockroachdb-node`                               |\n| `tls.certs.tlsSecret`                                     | Own certs are stored in TLS secret                              | `no`                                             |\n| `tls.init.image.repository`                               | Image to use for requesting TLS certificates                    | `cockroachdb/cockroach-k8s-request-cert`         |\n| `tls.init.image.tag`                                      | Image tag to use for requesting TLS certificates                | `0.4`                                            |\n| `tls.init.image.pullPolicy`                               | Requesting TLS certificates container pull policy               | `IfNotPresent`                                   |\n| `tls.init.image.credentials`                              | `registry`, `user` and `pass` credentials to pull private image | `{}`                                             |\n| `networkPolicy.enabled`                                   | Enable NetworkPolicy for CockroachDB's Pods                     | `no`                                             |\n| `networkPolicy.ingress.grpc`                              | Whitelist resources to access gRPC port of CockroachDB's Pods   | `[]`                                             |\n| `networkPolicy.ingress.http`                              | Whitelist resources to access gRPC port of CockroachDB's Pods   | `[]`                                             |\n\n\nOverride the default parameters using the `CockroachDB` custom resource.\n\n## Deep dive\n\n### Connecting to the CockroachDB cluster\n\nOnce you've created the cluster, you can start talking to it by connecting to its `-public` Service. CockroachDB is PostgreSQL wire protocol compatible, so there's a [wide variety of supported clients](https://www.cockroachlabs.com/docs/install-client-drivers.html). As an example, we'll open up a SQL shell using CockroachDB's built-in shell and play around with it a bit, like this (likely needing to replace `my-release-cockroachdb-public` with the name of the `-public` Service that was created with your installed chart):\n\n```shell\nkubectl run cockroach-client --rm -it \\\n--image=cockroachdb/cockroach \\\n--restart=Never \\\n-- sql --insecure --host my-release-cockroachdb-public\n```\n\n```\nWaiting for pod default/cockroach-client to be running, status is Pending,\npod ready: false\nIf you don't see a command prompt, try pressing enter.\nroot@my-release-cockroachdb-public:26257> SHOW DATABASES;\n+--------------------+\n|      Database      |\n+--------------------+\n| information_schema |\n| pg_catalog         |\n| system             |\n+--------------------+\n(3 rows)\nroot@my-release-cockroachdb-public:26257> CREATE DATABASE bank;\nCREATE DATABASE\nroot@my-release-cockroachdb-public:26257> CREATE TABLE bank.accounts (id INT\nPRIMARY KEY, balance DECIMAL);\nCREATE TABLE\nroot@my-release-cockroachdb-public:26257> INSERT INTO bank.accounts VALUES\n(1234, 10000.50);\nINSERT 1\nroot@my-release-cockroachdb-public:26257> SELECT * FROM bank.accounts;\n+------+---------+\n|  id  | balance |\n+------+---------+\n| 1234 | 10000.5 |\n+------+---------+\n(1 row)\nroot@my-release-cockroachdb-public:26257> \\q\nWaiting for pod default/cockroach-client to terminate, status is Running\npod \"cockroach-client\" deleted\n```\n\n> If you are running in secure mode, you will have to provide a client certificate to the cluster in order to authenticate, so the above command will not work. See [here](https://github.com/cockroachdb/cockroach/blob/master/cloud/kubernetes/client-secure.yaml) for an example of how to set up an interactive SQL shell against a secure cluster or [here](https://github.com/cockroachdb/cockroach/blob/master/cloud/kubernetes/example-app-secure.yaml) for an example application connecting to a secure cluster.\n\n### Cluster health\n\nBecause our pod spec includes regular health checks of the CockroachDB processes, simply running `kubectl get pods` and looking at the `STATUS` column is sufficient to determine the health of each instance in the cluster.\n\nIf you want more detailed information about the cluster, the best place to look is the Admin UI.\n\n### Accessing the Admin UI\n\nIf you want to see information about how the cluster is doing, you can try pulling up the CockroachDB Admin UI by port-forwarding from your local machine to one of the pods (replacing `my-release-cockroachdb-0` with the name of one of your pods:\n\n```shell\nkubectl port-forward my-release-cockroachdb-0 8080\n```\n\nYou should then be able to access the Admin UI by visiting <http://localhost:8080/> in your web browser.\n\n### Failover\n\nIf any CockroachDB member fails, it is restarted or recreated automatically by the Kubernetes infrastructure, and will re-join the cluster automatically when it comes back up. You can test this scenario by killing any of the CockroachDB pods:\n\n```shell\nkubectl delete pod my-release-cockroachdb-1\n```\n\n```shell\nkubectl get pods -l \"app.kubernetes.io/instance=my-release,app.kubernetes.io/component=cockroachdb\"\n```\n\n```\nNAME                      READY     STATUS        RESTARTS   AGE\nmy-release-cockroachdb-0  1/1       Running       0          5m\nmy-release-cockroachdb-2  1/1       Running       0          5m\n```\n\nAfter a while:\n\n```shell\nkubectl get pods -l \"app.kubernetes.io/instance=my-release,app.kubernetes.io/component=cockroachdb\"\n```\n\n```\nNAME                      READY     STATUS        RESTARTS   AGE\nmy-release-cockroachdb-0  1/1       Running       0          5m\nmy-release-cockroachdb-1  1/1       Running       0          20s\nmy-release-cockroachdb-2  1/1       Running       0          5m\n```\n\nYou can check the state of re-joining from the new pod's logs:\n\n```shell\nkubectl logs my-release-cockroachdb-1\n```\n\n```\n[...]\nI161028 19:32:09.754026 1 server/node.go:586  [n1] node connected via gossip and\nverified as part of cluster {\"35ecbc27-3f67-4e7d-9b8f-27c31aae17d6\"}\n[...]\ncockroachdb-0.my-release-cockroachdb.default.svc.cluster.local:26257\nbuild:      beta-20161027-55-gd2d3c7f @ 2016/10/28 19:27:25 (go1.7.3)\nadmin:      http://0.0.0.0:8080\nsql:\npostgresql://root@my-release-cockroachdb-1.my-release-cockroachdb.default.svc.cluster.local:26257?sslmode=disable\nlogs:       cockroach-data/logs\nstore[0]:   path=cockroach-data\nstatus:     restarted pre-existing node\nclusterID:  {35ecbc27-3f67-4e7d-9b8f-27c31aae17d6}\nnodeID:     2\n[...]\n```\n\n### NetworkPolicy\n\nTo enable NetworkPolicy for CockroachDB, install [a networking plugin that implements the Kubernetes NetworkPolicy spec](https://kubernetes.io/docs/tasks/administer-cluster/declare-network-policy#before-you-begin), and set `networkPolicy.enabled` to `yes`/`true`.\n\nFor Kubernetes v1.5 & v1.6, you must also turn on NetworkPolicy by setting the `DefaultDeny` Namespace annotation. Note: this will enforce policy for _all_ pods in the Namespace:\n\n```shell\nkubectl annotate namespace default \"net.beta.kubernetes.io/network-policy={\\\"ingress\\\":{\\\"isolation\\\":\\\"DefaultDeny\\\"}}\"\n```\n\nFor more precise policy, set `networkPolicy.ingress.grpc` and `networkPolicy.ingress.http` rules. This will only allow pods that match the provided rules to connect to CockroachDB.\n\n### Scaling\n\nScaling should be managed via the `helm upgrade` command. After resizing your cluster on your cloud environment (e.g., GKE or EKS), run the following command to add a pod. This assumes you scaled from 3 to 4 nodes:\n\n```shell\nkubectl patch cockroachdbs example -p '{\"spec\": {\"statefulset\":{\"replicas\":\"4\"}}}' --type merge\n```\n\nNote, that if you are running in secure mode (`tls.enabled` is `yes`/`true`) and increase the size of your cluster, you will also have to approve the CSR (certificate-signing request) of each new node (using `kubectl get csr` and `kubectl certificate approve`).\n\n[1]: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#inter-pod-affinity-and-anti-affinity\n[2]: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#node-affinity\n[3]: https://cert-manager.io/\n[4]: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/#priorityclass\n[5]: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/\n",
                "displayName": "CockroachDB Helm Operator",
                "installModes": [
                    {
                        "supported": true,
                        "type": "OwnNamespace"
                    },
                    {
                        "supported": true,
                        "type": "SingleNamespace"
                    },
                    {
                        "supported": false,
                        "type": "MultiNamespace"
                    },
                    {
                        "supported": true,
                        "type": "AllNamespaces"
                    }
                ],
                "keywords": [
                    "cockroach",
                    "cockroachdb"
                ],
                "links": [
                    {
                        "name": "Helm Chart Source",
                        "url": "https://github.com/helm/charts/tree/master/stable/cockroachdb"
                    },
                    {
                        "name": "Configuration Options",
                        "url": "https://github.com/helm/charts/tree/master/stable/cockroachdb#configuration"
                    },
                    {
                        "name": "CockroachDB Source",
                        "url": "https://github.com/cockroachdb/cockroach"
                    }
                ],
                "maintainers": [
                    {
                        "email": "dmesser@redhat.com",
                        "name": "Daniel Messer"
                    }
                ],
                "maturity": "stable",
                "minKubeVersion": "1.8.0",
                "provider": {
                    "name": "Helm Community",
                    "url": "https://artifacthub.io/packages/helm/cockroachdb/cockroachdb"
                }
            }
        }
    ],
    "relatedImages": [
        {
            "name": "",
            "image": "example.com/myrepo/cockroachdb-bundle@sha256:f2722c8d760c9a5a5c4d5737fd8a4d47ba9845fedbbaec181fae98028ad53c0c"
        },
        {
            "name": "",
            "image": "gcr.io/kubebuilder/kube-rbac-proxy:v0.5.0"
        },
        {
            "name": "",
            "image": "quay.io/helmoperators/cockroachdb:v5.0.4"
        }
    ]
}
